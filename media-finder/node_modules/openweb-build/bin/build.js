#!/usr/bin/env node
/* openweb-build tool. version 1.1.4 */
console.log('executing openweb-build');

var fs = require('fs')
		, wrench = require('wrench')
		, spawn = require('child_process').spawn
		, lessless = require('lessless')
		, argv = require('optimist').argv
		, requirejs = require('requirejs')
		, buildFile = argv.profile || 'app.build.js'
		, buildFileConfig;

try {
	//read in the build profile
	buildFileConfig = eval("(" + fs.readFileSync(buildFile).toString() + ")");
	buildFileConfig.openweb = buildFileConfig.openweb || {};
}
catch (e) {
	throw new Error("Build file " + buildFile + " is malformed: " + e);
}

//delete the previous build folder if 'clear' argument passed.
if(argv.clear === 'true'){
	console.log('deleting previous build directory');
	wrench.rmdirSyncRecursive(buildFileConfig.dir, true);
}

//optionally just copy the folder over instead of doing the requirejs build
if (argv.copyonly === 'true') {
	console.log('doing COPY only');
	//create target folders then copy things over
	wrench.mkdirSyncRecursive(buildFileConfig.dir, 0777);
	wrench.copyDirSyncRecursive(buildFileConfig.appDir, buildFileConfig.dir);
	process.exit(0);
}

//Remove symlinks so that r.js doesn't remove all files in those symlinks that point to folders
if(buildFileConfig.keepBuildDir != true)
	removeSymlinks(buildFileConfig.dir, buildFileConfig.openweb.symlinks);

//Run the RequireJS build
requirejs.optimize(buildFileConfig, function (buildResponse) {
	//unless disabled, run the lessless tool to optimize LESS into CSS and update paths
	if(argv.less !== 'false'){
		process.chdir(buildFileConfig.dir);
		lessless.optimizeProject(process.cwd(), buildFileConfig.openweb.styleDirs, buildFileConfig.openweb.stripExtensions || []);
	}
	//create symlinks in build folder
	createSymlinks(buildFileConfig.dir, buildFileConfig.openweb.symlinks);
});

/*
 r.js doesn't copy over the symlinks, so we do it. Must be specified in the
 openweb.symlinks setting in app.build.js
 */
function createSymlinks(inDir, links){
	var location;
	if (links){
		for(var key in links){
			location = inDir + "/"  + key;

			try{
				console.log('creating symlink: ' + location);

				//Just in case the link changes, remove it if it exists
				if(fs.existsSync(location))
					fs.unlinkSync(location);

				fs.symlinkSync(links[key], location, 'dir');
			}
			catch(err){
				console.log('unable to create symlink: ' + location);
			}
		}
	}
}

//Remove symlinks so that r.js doesn't remove all files in those symlinks that point to folders
// Remove symlinks if the build dir should be deleted.  That way, when require.optimize

function removeSymlinks(inDir, links){
	var location;

	if (links){
		for(var key in links){
			location = inDir + "/"  + key;
			if(fs.existsSync(location)) {
				try{
					console.log('removing symlink: ' + location);
					fs.unlinkSync(location);
				}
				catch(err){
					console.log('unable to remove symlink: ' + location);
				}
			}
		}
	}
}