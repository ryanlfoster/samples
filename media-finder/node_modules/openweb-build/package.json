{
  "author": {
    "name": "Dave Geddes",
    "email": "davidcgeddes@gmail.com",
    "url": "http://geddesign.com"
  },
  "name": "openweb-build",
  "description": "Build tool for Open Web projects",
  "version": "1.1.4",
  "repository": {
    "url": ""
  },
  "engines": {
    "node": "0.x.x"
  },
  "dependencies": {
    "wrench": "1.3.x",
    "lessless": "0.2.x",
    "requirejs": "2.x.x",
    "optimist": "0.3.x"
  },
  "devDependencies": {},
  "readme": "# openweb-build\r\nBuild tool for Open Web projects.\r\nRuns the RequireJS build tool which compresses and combines your JavaScript.\r\nPrecompiles your Handlebars templates (if you load them with the tmpl.js plugin).\r\nCompiles your LESS into CSS and updates references, removes less.js\r\n\r\n## to run the build\r\nfrom the root of your project, type:\r\n    node node_modules/openweb-build/bin/build.js\r\n\r\n## options\r\n\r\n### different build tool name\r\nThis tool will be expecting your RequireJS build profile to be named app.build.js, located at the project root.\r\nIf you want to use a different name/location for this file, just pass it in as an argument like so:\r\n    node node_modules/openweb-build/bin/build.js --profile=path/to/myproject.build.js\r\n\r\n### copy files only\r\nSometimes you may want to just copy your frontend files to the output directory, without doing any optimizations.\r\nThis is easily achieved by using the --copyonly option like so:\r\n    node node_modules/openweb-build/bin/build.js --copyonly=true\r\n\r\n### disable LESS compilation\r\nIf your project doesn't use LESS, or you want to skip optimization for whatever reason, you can tell openweb-build to not run less like so:\r\n    node node_modules/openweb-build/bin/build.js --less=false\r\n\r\n### clear previous build directory\r\nRequireJS creates a copy of your entire frontend folder for the build. It should only copy over files that are new, which is good if you have lots of videos/images in your frontend folder. If something ever goes wrong with your build folder, you may want to delete it and run your build again. The --clear=true option does that. \r\n\r\n### add symlinks\r\nRequireJS creates a copy of your entire frontend folder for the build. This can get really slow if you're including a lot of binary files (videos, mockups, etc) in the frontend folder. A better practice is to put those files outside of the frontend folder, then create a symlink to it. The only problem then is that RequireJS won't copy over your symlinks to the build folder. So openweb-build will create the symlinks for you, you just have have specify what you want them to be using the openweb.symlinks config object. Example:\r\nopenweb: {\r\n  symlinks: {\r\n    'videos' : '../videos'\r\n  }\r\n}\r\nThe key ('videos') is the location of the actual folder you want to link to, relative to the root of your project where you run the build. \r\nThe value ('../videos') is the path to the original folder FROM the build dir.\r\nIn this example, frontend-build/videos will now symlink to videos. \r\n\r\nAlso be sure to have RequireJS ignore your symlinks, by using the fileExclusionRegExp option:\r\n\r\nfileExclusionRegExp: /^(\\.|(videos)$)/\r\n\r\nThat regexp ignores anything that starts with a . OR the videos folder. To ignore multiple folders you would do it like this:\r\n\r\nfileExclusionRegExp: /^(\\.|(videos|images|media)$)/,\r\n\r\n## NOTE\r\nIf your project has nested require() calls, and you want those files to be part of the optimized build, then your build profile needs the findNestedDependencies: true setting. \r\n\r\n\r\n",
  "_id": "openweb-build@1.1.4",
  "dist": {
    "shasum": "f877117bca47b06fab26e09553f3bc4892c7c7c2"
  },
  "_from": "http://openweb.ldschurch.org/openweb-build.tar.gz"
}
